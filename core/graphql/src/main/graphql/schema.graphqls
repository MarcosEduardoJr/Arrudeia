type UserGraph {
    uuid: String
    name: String
    email: String
    phone: String
    idDocument: String
    birthDate: String
    profileImage: String
    zipCode: String
    street: String
    number: Int
    district: String
    city: String
    state: String
    country: String
    interests: String
    biography: String
    gender: String
    lastCity: String
    lastCountry: String
}

type TravelerGraph {
    travelerReceiveId: String
    travelerSendId: String
    name: String
    city: String
    interests: String
    aboutMe: String
    gender: String
    img: String
    travelerReceiveMatch: Int!
    travelerSendMatch: Int!
    travelerSendEmail: String
    travelerReceiveEmail: String
}

type ArrudeiaPlace {
    available: [ArrudeiaAvailablePlaceGraph]
    description: String
    categoryName: String
    image: String
    latitude: Float
    longitude: Float
    name: String
    phone: String
    priceLevel: Int
    rating: Int
    socialNetwork: String
    subCategoryName: String
    uuid: String
    city: String
    state: String
    country: String
}


type ArrudeiaAvailablePlaceGraph {
    id: ID
    name: String
    placeId: String
}

type CheckList{
    checklist: [CheckListGraph]
}

type CheckListGraph{
    name: String
}

type RecipesGraph{
    uuid: Int
    name: String
    time: Int
    quantity: String
    img: String
    level: String
}

type Recipes{
    recipes: [RecipesGraph]
}

type RecipeDetailGraph {
    description: String
    img: String
    ingredients : [Ingredients]
    level: String
    name: String
    quantity: String
    time: Int
    urlVideo: String
}

type Ingredients{
    id: Int
    recipeId: String
    step: String
}


type AidGraph {
    id: Int
    description: String
    img: String
    steps : [AidSteps]
    name: String
    urlVideo: String
}

type AidSteps{
    id: Int
    aidId: String
    step: String
}

type GetServiceType {
    categoryId: Int
    city: String
    country: String
    description: String
    district: String
    id: Int
    image: [ImageServiceType]
    name: String
    number: Int
    state: String
    street: String
    uuidUserCreator: String
    zipCode: String
    imageUrl: String
}

type ImageServiceType{
    id: Int
    serviceId: Int
    url: String
}

type ServicesExpertiseType {
    name: String!
    id: Int!

}

type CepAddress {
    city: String!
    country: String!
    district: String!
    state: String!
    street: String!
    zipCode: String!
}

type Key {
    name: String!
    key: String!
}

type Query {
    _entities(representations: [_Any!]!): [_Entity]!

    _service: _Service!

    user(uuid: String!): UserGraph


    travelers(userUuid: String!,page : Int, pageSize: Int): [TravelerGraph]
    travelersMatch(userUuid: String!): [TravelerGraph]


    arrudeiaPlaces(state: String!): [ArrudeiaPlace]
    arrudeiaPlace(uuid: String!): ArrudeiaPlace
    arrudeiaAvailablePlace(placeId: String!): ArrudeiaAvailablePlaceGraph

    checklist: [CheckListGraph]

    recipes: [RecipesGraph]
    recipe(uuid: String!): RecipeDetailGraph

    aids: [AidGraph]
    aid(id: String!): AidGraph

    services: [GetServiceType]
    service(id: Int!): GetServiceType
    servicesExpertise: [ServicesExpertiseType]

    cepAddress(cep: String!): CepAddress

    keys: [Key]
}

input Service {
    uuidUserCreator: String!
    name: String!
    description: String!
    zipCode: String!
    street: String!
    number: Int!
    district: String!
    city: String!
    state: String!
    country: String!
    categoryId: Int!
    image: [ImageInput]!
}

input ImageInput {
    id: Int!
    serviceId: Int!
    url: String!
}

type Mutation {

    updateUser(
        uuid: String,
        name: String,
        email: String,
        phone: String,
        idDocument: String,
        birthDate: String,
        profileImage: String,
        zipCode: String,
        street: String,
        number: Int,
        district: String,
        city: String,
        state: String,
        country: String,
        idUserDoc: String,
        interests: String,
        biography: String,
        gender: String,
        lastCity: String,
        lastCountry: String
    ) : String

    createUser(
        uuid: String,
        name: String,
        email: String,
        phone: String,
        idDocument: String,
        birthDate: String,
        profileImage: String,
        zipCode: String,
        street: String,
        number: Int,
        district: String,
        city: String,
        state: String,
        country: String,
        idUserDoc: String,
        interests: String,
        biography: String,
        gender: String,
        lastCity: String,
        lastCountry: String
    ) : String

    updateUserAddress(
        uuid: String,
        zipCode: String
        street: String
        number: Int
        district: String
        city: String
        state: String
        country: String
    ) : String

    createArrudeiaPlace(
        categoryName: String,
        description: String,
        image: String,
        latitude: Float,
        longitude: Float,
        name: String,
        phone: String,
        priceLevel: Int,
        rating: Int,
        socialNetwork: String,
        subCategoryName: String,
        uuid: String,
        city: String,
        state: String,
        country: String
    ) : String

    createArrudeiaAvailablePlace(
        name: String,
        placeId: String
    ) : String

    createServiceCategory(
        serviceType : Service
    ) : Int

    updateTravelerConnection(
        travelerReceive: String,
        travelerSend: String,
        travelerSendMatch: Int,
        travelerReceiveMatch: Int,
    ) : String


    createTravelerConnection(
    travelerReceive: String,
    travelerReceiveMatch: String,
    travelerSend: String,
    travelerSendMatch: String
    ) : String
}

union _Entity = UserGraph

scalar _Any

type _Service {
    """
    The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
    """
    sdl: String
}

schema {
    query: Query
    mutation: Mutation
}
